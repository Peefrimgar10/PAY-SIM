%% Create Proportioned Black Body Spectrum:
%[proportionedWavelengths,Lam] = UnitBlackBody(binSize, T);

%% Scale the Black Body spectrum using Solar Constant (Solar Irradiance):
%[FullIrradiance] = applySolarConstant(proportionedWavelengths,Lam,binSize);

%% Upload a reflectivity curve (from .csv file):
%[specReflProfile] = processSpecReflProf(specReflProfile,wavelengthTop, wavelengthBottom);
%CONSIDER GETTING RID OF THIS.  

%% Apply reflectivity profile to solar model:
%[reflectedSpectrum] = applyRefl(specReflProfile,IrradianceLimited);
%IF YOU GET RID OF THE ABOVE, GET RID OF THIS ONE TOO.

%% Determine the proportion of each wavelength reflected off the object:
%[bandProportions] = proportioner(reflectedSpectrum);

%% Read Star Data files:
%[avgSpectralIrradiance] = importStarData(proportionedWavelengths,apparentMagnitude,wavelengthTop,wavelengthBottom,binSize);
%FIND A BETTER WAY TO APPLY THE MAGNITUDE TO FLUX CONVERSION.

%% Apply Area scale to the band proportions of the target:
%[wavelengthsAtSORA] = applyMagnitude(bandProportions,avgSpectralIrradiance);

%% Apply System efficiency (include Grating, Lens, etc.)
%[wavelengthsAtSensor] = applySystemEfficiency(sysEff,wavelengthsAtLens);

% subplot(2,1,2)
% h = subplot(2,1,2)
% bar(photonCountAtSensor(:,2),photonCountAtSensor(:,1),'r'); %Display the model for solar output
%     title(['Number of photons vs wavelength for Exposure = ', num2str(exposure),'s'],'FontSize', 25);
%     xlabel('Wavelength (m)','FontSize', 25);
%     ylabel('Number of photons','FontSize', 25);
%     axis auto

%set(figure(1), 'FontSize', 25)
%set(figure(2), 'FontSize', 25)
%set(h,'FontSize',25)
